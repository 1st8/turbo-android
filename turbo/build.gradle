apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.jetbrains.dokka'

// Update when releasing a new library version
ext.libVersionCode = 2
ext.libVersionName = '7.0.0-alpha02'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.29.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.20"
    }
}

repositories {
    google()
    mavenCentral()
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
        versionCode libVersionCode
        versionName libVersionName

        // Define ProGuard rules for this android library project. These rules will be applied when
        // a consumer of this library sets 'minifyEnabled true'.
        consumerProguardFiles 'proguard-consumer-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.21'
    implementation 'com.google.android.material:material:1.2.1'

    // AndroidX
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // JSON
    implementation 'com.google.code.gson:gson:2.8.6'

    // Networking/API
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'

    // Exported AndroidX dependencies
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.core:core-ktx:1.3.2'
    api 'androidx.webkit:webkit:1.3.0'
    api 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    api 'androidx.navigation:navigation-ui-ktx:2.3.2'

    // Tests
    testImplementation 'androidx.test:core:1.3.0' // Robolectric
    testImplementation 'androidx.navigation:navigation-testing:2.3.2'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    testImplementation 'junit:junit:4.13.1'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'turbo'

    publishedGroupId = 'dev.hotwire'
    publishedArtifactId = 'turbo'

    libraryName = 'Turbo Android'
    libraryDescription = 'Turbo for Android'
    libraryVersion = "$libVersionName"

    siteUrl = 'https://github.com/hotwired/turbo-android'
    gitUrl = 'https://github.com/hotwired/turbo-android.git'

    developerId = 'basecamp'
    developerName = 'Basecamp'
    developerEmail = 'support@basecamp.com'
}

// Maven
group = publishedGroupId
version = libraryVersion

//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging 'aar'
//                groupId publishedGroupId
//                artifactId publishedArtifactId
//
//                // Add your description here
//                name libraryName
//                description libraryDescription
//
//                developers {
//                    developer {
//                        id developerId
//                        name developerName
//                        email developerEmail
//                    }
//                }
//            }
//        }
//    }
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}

// Bintray
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Rejected')
            }
        }
    }
}

apply plugin: 'maven'

// Build local artifacts to /artifacts
uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file("artifacts")
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId publishedGroupId
            artifactId publishedArtifactId
            version libVersionName
        }
    }
}

// configure only html format e.g.
tasks.dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            includeNonPublic = false
            skipEmptyPackages = true
            skipDeprecated = true
            reportUndocumented = true
            jdkVersion = 8
        }
    }
}

tasks.dokkaGfm.configure {
    dokkaSourceSets {
        named("main") {
            includeNonPublic = false
            skipEmptyPackages = true
            skipDeprecated = true
            reportUndocumented = true
            jdkVersion = 8
        }
    }
}

tasks.dokkaJavadoc.configure {
    dokkaSourceSets {
        named("main") {
            includeNonPublic = false
            skipEmptyPackages = true
            skipDeprecated = true
            reportUndocumented = true
            jdkVersion = 8
        }
    }
}
